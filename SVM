[1] Load Dataset (CSV)
       ↓
[2] Check for Nulls
       ↓
[3] Select Features (Age, Salary) and Target (Purchased)
       ↓
[4] Visualize Data (Scatter Plot)
       ↓
[5] Train-Test Split (70-30)
       ↓
[6] Scale Features with StandardScaler
       ↓
[7] Train SVM Model (linear/poly/rbf)
       ↓
[8] Predict on Test Data
       ↓
[9] Evaluate Accuracy and Confusion Matrix



import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
df = pd.read_csv("/content/Social_Network_Ads.csv")
df.head()
df['Age'].isna().sum()
df['EstimatedSalary'].isna().sum()
df['Purchased'].isna().sum()

X=df.iloc[:,2:4].values
X.shape
y=df.iloc[:,4].values
y
y.shape
import matplotlib.pyplot as plt
plt.scatter(X[:,0:1],X[:,1:2],c=y,marker='X',)
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.show()
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)
X_train
X_test

from sklearn.svm import SVC
classifier =SVC(kernel = 'linear', random_state=0)
classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)
from sklearn.metrics import confusion_matrix, accuracy_score
print(confusion_matrix(y_test,y_pred))
print('Accuracy = ',accuracy_score(y_test,y_pred))

classifier = SVC(kernel = 'poly',random_state=0,degree = 2)
classifier.fit(X_train,y_train)
y_pred = classifier.predict(X_test)
print(confusion_matrix(y_test,y_pred))
print('Accuracy = ', accuracy_score(y_test,y_pred))

classifier = SVC(kernel = 'poly', random_state=0, degree = 3)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
print(confusion_matrix(y_test,y_pred))
print('Accuracy = ', accuracy_score(y_test, y_pred))

classifier = SVC(kernel = 'rbf', random_state=0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
print(confusion_matrix(y_test,y_pred))
print('Accuracy = ', accuracy_score(y_test, y_pred)) 

classifier = SVC(kernel = 'rbf', random_state=0, C=3)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
print(confusion_matrix(y_test,y_pred))
print('Accuracy = ', accuracy_score(y_test, y_pred))

SVM describe with flowsteps

